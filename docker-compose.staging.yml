services:
  # PostgreSQL Database (Staging)
  postgres:
    image: postgres:16-alpine
    container_name: art-postgres-staging
    environment:
      POSTGRES_DB: artmanagement_staging
      POSTGRES_USER: artuser_staging
      POSTGRES_PASSWORD: ${DB_PASSWORD:-artpassword_staging}
    ports:
      - "5433:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U artuser_staging -d artmanagement_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - art-network-staging

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: art-backend-staging
    ports:
      - "8081:8080"
    env_file:
      - .env.staging
    environment:
      - PORT=8080
      - ENVIRONMENT=staging
      - DB_HOST=postgres
      - DB_PORT=5432
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - art-network-staging

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: art-frontend-staging
    ports:
      - "3001:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8080
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - art-network-staging

networks:
  art-network-staging:
    driver: bridge

volumes:
  postgres_staging_data:
    driver: local
