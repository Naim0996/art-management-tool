services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: art-postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME:-artmanagement}
      POSTGRES_USER: ${DB_USER:-artuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-artpassword}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-artuser} -d ${DB_NAME:-artmanagement}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - art-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: art-backend
    ports:
      - "${PORT:-8080}:8080"
    env_file:
      - .env
    environment:
      # Application Configuration
      - PORT=${PORT:-8080}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      
      # Database Configuration (override host to use Docker service name)
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-artuser}
      - DB_PASSWORD=${DB_PASSWORD:-artpassword}
      - DB_NAME=${DB_NAME:-artmanagement}
      - DB_SSLMODE=${DB_SSLMODE:-disable}
      
      # Auto-Migration & Seeding
      - AUTO_MIGRATE=${AUTO_MIGRATE:-true}
      - AUTO_SEED=${AUTO_SEED:-false}
      
      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET}
      
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      
      # Payment Configuration
      - PAYMENT_PROVIDER=${PAYMENT_PROVIDER:-mock}
      - STRIPE_API_KEY=${STRIPE_API_KEY:-}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
      
      # Shopify Integration
      - SHOPIFY_API_KEY=${SHOPIFY_API_KEY:-}
      - SHOPIFY_API_SECRET=${SHOPIFY_API_SECRET:-}
      - SHOPIFY_SHOP_DOMAIN=${SHOPIFY_SHOP_DOMAIN:-}
      - SHOPIFY_ACCESS_TOKEN=${SHOPIFY_ACCESS_TOKEN:-}
      
      # Etsy Integration
      - ETSY_API_KEY=${ETSY_API_KEY:-}
      - ETSY_API_SECRET=${ETSY_API_SECRET:-}
      - ETSY_SHOP_ID=${ETSY_SHOP_ID:-}
      - ETSY_SHOP_NAME=${ETSY_SHOP_NAME:-}
      - ETSY_SHOP_URL=${ETSY_SHOP_URL:-}
      - ETSY_ACCESS_TOKEN=${ETSY_ACCESS_TOKEN:-}
      - ETSY_API_BASE_URL=${ETSY_API_BASE_URL:-https://openapi.etsy.com/v3}
      - ETSY_PAYMENT_CALLBACK_URL=${ETSY_PAYMENT_CALLBACK_URL:-}
      - ETSY_SYNC_ENABLED=${ETSY_SYNC_ENABLED:-false}
      - ETSY_SYNC_INTERVAL_PRODUCTS=${ETSY_SYNC_INTERVAL_PRODUCTS:-3600}
      - ETSY_SYNC_INTERVAL_INVENTORY=${ETSY_SYNC_INTERVAL_INVENTORY:-1800}
      - ETSY_RATE_LIMIT_REQUESTS=${ETSY_RATE_LIMIT_REQUESTS:-10000}
      - ETSY_RATE_LIMIT_WINDOW=${ETSY_RATE_LIMIT_WINDOW:-86400}
      
      # Scheduler Configuration
      - SCHEDULER_ENABLED=${SCHEDULER_ENABLED:-true}
      
      # Rate Limiting
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    volumes:
      - uploads_data:/app/uploads
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - art-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: art-frontend
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      # For browser use - empty string uses relative paths through Next.js rewrites
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-}
      # For server-side rewrites in Next.js (internal Docker network)
      - BACKEND_URL=${BACKEND_URL:-http://backend:8080}
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - art-network

networks:
  art-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
