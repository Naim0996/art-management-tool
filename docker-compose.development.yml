services:
  # PostgreSQL Database (Development)
  postgres:
    image: postgres:16-alpine
    container_name: art-postgres-dev
    environment:
      POSTGRES_DB: artmanagement
      POSTGRES_USER: artuser
      POSTGRES_PASSWORD: artpassword
      # Auto-run initialization scripts
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend/migrations:/docker-entrypoint-initdb.d/migrations
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U artuser -d artmanagement"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - art-network-dev

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: art-backend-dev
    ports:
      - "8080:8080"
    env_file:
      - .env.development
    environment:
      - PORT=8080
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=artuser
      - DB_PASSWORD=artpassword
      - DB_NAME=artmanagement
      - DB_SSLMODE=disable
      # Auto-run migrations and seeding
      - AUTO_MIGRATE=true
      - AUTO_SEED=true
    volumes:
      # Mount source for hot-reload in development
      - ./backend:/app
      - uploads_dev_data:/app/uploads
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - art-network-dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: art-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8080
      - NODE_ENV=development
    volumes:
      # Mount source for hot-reload in development
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - art-network-dev

networks:
  art-network-dev:
    driver: bridge

volumes:
  postgres_dev_data:
    driver: local
  uploads_dev_data:
    driver: local
